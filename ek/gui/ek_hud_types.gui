types VassalLimit
{
	type ek_vassal_limit = button 
	{
		name = "vassal_limit"
		layoutpolicy_vertical = expanding

		minimumsize = { 60 0 }

		margin_left = 3
		margin_bottom = 3

		tooltip = "[Character.GetVassalLimitTooltip]"
		using = tooltip_ne

		background = {
			visible = "[GreaterThan_int32( Character.GetNumVassalsTowardsLimit, Character.GetVassalLimit )]"
			using = Status_Bad
			margin_bottom = -3
		}

		hbox = {
			icon = {
				texture = "gfx/interface/icons/icon_vassal.dds"
				size = { 25 25 }
			}

			text_single = {
				name = "value"
				text = "[Character.GetNumVassalsTowardsLimit]/[Character.GetVassalLimit]"
				align = nobaseline
				margin_bottom = 1

				max_width = 110
			}
		}
	}
}


types Arcana
{
	type ek_spellcasting_observer = widget 
	{
		name = "spell_casting_observer"
		size = { 0 0 }
		visible = "[GetPlayer.MakeScope.Var('spells_open').IsSet]"
		state = {
			name = _show
			#on_start = "[ExecuteConsoleCommand('GUI.ClearWidgets spellbook_interaction_window')]"
			on_start = "[GetVariableSystem.Clear( 'spellbook_window' )]"
			on_start = "[GetScriptedGui('spell_open').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
			on_start = "[GetVariableSystem.Clear('spell_county_list_open')]"
			on_start = "[GetVariableSystem.Clear('spell_select')]"
			duration = 0.05
			#on_finish = "[ExecuteConsoleCommand('gui.createwidget gui/custom_widgets/spellbook_widget.gui spellbook_interaction_window')]"
			on_finish = "[GetVariableSystem.Set( 'spellbook_window', 'true' )]"
			on_finish = "[GetVariableSystem.Set('spellbook_tab', 'spells')]"
		}
	}
	type ek_hud_magic_bar = container 
	{
		position = { 3 -90 }
		alwaystransparent = no
		visible = "[And(GetPlayer.IsValid, Not(GetVariableSystem.Exists('hide_bottom_left_HUD')))]"
		widget = {
			datacontext = "[GetScriptedGui('can_see_magic_bar')]"
			visible = "[ScriptedGui.IsValid( GuiScope.SetRoot(GetPlayer.MakeScope).End )]"
			name = "magicka_widget"
			size = { 39 113 }
			#parentanchor = bottom|left
			#position = { 20 -50 }

			#tooltip = magicka_value
			using = tooltip_ne
			tooltipwidget = {
				magicka_breakdown_widget = {
					datacontext = "[GetPlayer]"
				}
			}
			vbox = {
				size = { 14 66 }
				maximumsize = { 14 66 }
				#parentanchor = top|left
				#position = { 35 13 }
				position = { 14 12 }

				background = {
					texture = "gfx/interface/colors/white.dds"
					color = { 0.1 0.1 0.1 0.8 }
				}

				#pushes the progress part to bottom
				widget = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_vertical = "[GetProgressBarValueMaxOtherScaled( FixedPointToFloat(GetPlayer.MakeScope.Var('magicka').GetValue), FixedPointToFloat(GetPlayer.MakeScope.ScriptValue('magicka_max')), '(int32)66' )]"
				}
				#gets the progress bar part
				widget = {
					layoutpolicy_horizontal = expanding
					layoutpolicy_vertical = expanding
					layoutstretchfactor_vertical = "[GetProgressBarValueMaxScaled( FixedPointToFloat(GetPlayer.MakeScope.Var('magicka').GetValue), FixedPointToFloat(GetPlayer.MakeScope.ScriptValue('magicka_max')), '(int32)66' )]"

					progressbar = {
						#visible = "[GreaterThanOrEqualTo_int32(GetPlayer.GetStressLevel, '(int32)3')]"
						size = { 100% 100% }
						progresstexture = "gfx/interface/colors/blue.dds"
						noprogresstexture = "gfx/interface/colors/light_blue.dds"
						spriteType = Corneredtiled
						spriteborder = { 6 6 }

						using = Animation_ShowHide_Standard
					}
				}
			}

			icon = {
				size = { 100% 100% }
				texture = "gfx/interface/patron_window/ardor_v_bg.dds"

				icon = {
					parentanchor = vcenter
					#position = { 13 -1 }
					position = { 10 32 }
					size = { 20 20 }
					texture = "gfx/interface/icons/icon_magicka.dds"
				}
			}
		}
	}
}


types Astronomy
{
	type astronomy_button = button_icon 
	{
		name = "astronomy_button"
		#visible = "[Not(IsObserver)]"
		texture = "gfx/interface/icons/lunar_cycle/stars.dds"
		tooltipwidget = {
			astronomy_tooltip = {}
		}
		using = tooltip_above #note can only have one console command per button. extend with state blocks
		#onclick = "[ExecuteConsoleCommand( Select_CString( GetVariableSystem.Exists('spells_open'), 'GUI.ClearWidgets spellbook_interaction_window', 'gui.createwidget gui/custom_widgets/spellbook_widget.gui spellbook_interaction_window' ) )]"
		#onclick = "[GetVariableSystem.Toggle('spells_open')]"
	}
	
	type astronomy_tooltip = widget
	{
		alwaystransparent = no
		using = GeneralTooltipSetup
		widget = {
			name = "background"
			using = DefaultTooltipBackground
			size = { 100% 100% }
			alwaystransparent = no
		}
		vbox = {
			set_parent_size_to_minimum = yes
			margin = { 12 8 }
			margin_bottom = 16
			spacing = 4

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = expanding
				margin = { 0 4 }
				background = {
					name = "header"
					texture = "gfx/interface/component_tiles/tile_title_big_top_01.dds"
					spriteType = Corneredstretched
					align = vcenter|left
					modify_texture = {
						name = "mask"
						texture = "gfx/interface/component_masks/mask_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 160 0 }
						blend_mode = alphamultiply
						alpha = 0.5
					}

					modify_texture = {
						name = "overlay"
						texture = "gfx/interface/component_overlay/overlay_title_big_top.dds"
						spriteType = Corneredstretched
						spriteborder = { 0 0 }
						blend_mode = overlay
					}
				}
				hbox = {
					layoutpolicy_horizontal = expanding
					button_icon = {
						size = { 64 64 }
						texture = "gfx/interface/icons/lunar_cycle/stars.dds"
						alwaystransparent = yes
					}

					spacer = {
						size = { 32 0 }
					}

					vbox = {
						layoutpolicy_vertical = expanding
						spacer = {
							size = { 0 6 }
						}
						text_single = {
							layoutpolicy_horizontal = expanding
							name = "header"
							text = "astronomy_name"
							align = left
							# align = hcenter
							# elide = middle
							using = Font_Type_Flavor
							using = Font_Size_Big

						}
						expand = {
							layoutpolicy_vertical = growing
						}
					}
					expand = {
						layoutpolicy_horizontal = growing
					}
				}
			}

			hbox = {
				spacing = 2
				margin = { 2 0 }

				vbox = {
					spacing = 2
					layoutpolicy_vertical = expanding
					hbox = {
						spacing = 2
						layoutpolicy_horizontal = expanding
						vbox = {
							name = "signs"
							size = { 64 64 }
							icon = {
								texture = "gfx/interface/icons/lunar_cycle/signs_grid.dds"
								size = { 64 64 }
								framesize = { 64 64 }
								frame = "[FixedPointToInt(EmptyScope.ScriptValue('cycle_month'))]"
								using = Master_Button_Modify_Texture
							}
						}
						divider_light = {
							layoutpolicy_vertical = growing
						}
						spacer = {
							size = { 4 0 }
						}
						vbox = {
							text_single = {
								layoutpolicy_horizontal = growing
								text = "starsign_desc"
								align = left
							}
						}
					}
					divider_light = {
						layoutpolicy_horizontal = growing
					}
					hbox = {
						spacing = 2
						layoutpolicy_horizontal = expanding
						vbox = {
							name = "masser_phases"
							size = { 64 64 }
							icon = {
								texture = "gfx/interface/icons/lunar_cycle/moon_masser.dds"
								size = { 64 64 }
								modify_texture = {
									texture = "gfx/interface/icons/lunar_cycle/moon_phases.dds"
									framesize = { 64 64 }
									frame = "[FixedPointToInt(EmptyScope.ScriptValue('cycle_masser_gui'))]"
									alpha = 0.8
									blend_mode = multiply
								}
							}
						}
						divider_light = {
							layoutpolicy_vertical = growing
						}
						spacer = {
							size = { 4 0 }
						}
						text_single = {
							layoutpolicy_horizontal = growing
							text = "masser_desc"
							align = left
						}
					}
					divider_light = {
						layoutpolicy_horizontal = growing
					}
					hbox = {
						spacing = 2
						layoutpolicy_horizontal = expanding
						vbox = {
							name = "secunda_phases"
							size = { 64 64 }
							icon = {
								texture = "gfx/interface/icons/lunar_cycle/moon_secunda.dds"
								size = { 64 64 }
								modify_texture = {
									texture = "gfx/interface/icons/lunar_cycle/moon_phases.dds"
									framesize = { 64 64 }
									frame = "[FixedPointToInt(EmptyScope.ScriptValue('cycle_secunda_gui'))]"
									alpha = 0.9
									blend_mode = multiply
								}
							}
						}
						divider_light = {
							layoutpolicy_vertical = growing
						}
						spacer = {
							size = { 4 0 }
						}
						text_single = {
							layoutpolicy_horizontal = growing
							text = "secunda_desc"
							align = left
						}
					}
					divider_light = {
						layoutpolicy_horizontal = growing
						visible = "[GetScriptedGui('lunar_cycle_third_moon').IsShown(GuiScope.End)]" 
					}
					hbox = {
						visible = "[GetScriptedGui('lunar_cycle_third_moon').IsShown(GuiScope.End)]"

						spacing = 2
						layoutpolicy_horizontal = expanding
						vbox = {
							name = "third_moon"
							size = { 64 64 }
							icon = {
								texture = "gfx/interface/icons/lunar_cycle/moon_dark.dds"
								size = { 64 64 }
							}
						}
						divider_light = {
							layoutpolicy_vertical = growing
						}
						spacer = {
							size = { 4 0 }
						}
						text_single = {
							layoutpolicy_horizontal = growing
							text = "third_moon_desc"
							align = left
						}
					}
				}
			}
		}
	}
}
