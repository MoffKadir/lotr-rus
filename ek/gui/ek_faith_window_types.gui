types EKFaithWindow
{
	type ek_patrons = vbox
	{
		name = "tab_patrons"
		layoutpolicy_horizontal = expanding
		layoutpolicy_vertical = expanding
		visible = "[GetVariableSystem.HasValue( 'faith_view_tabs', 'patrons' )]"

		state = {
			name = _show
			using = Animation_FadeIn_Quick
			on_start = "[GetScriptedGui('faith_get_patrons').Execute(GuiScope.SetRoot(FaithWindow.GetFaith.MakeScope).AddScope('player_s', GetPlayer.MakeScope ).End)]"
		}

		state = {
			name = _hide
			alpha = 0
			on_start = "[GetScriptedGui('faith_clear_patrons').Execute(GuiScope.SetRoot(FaithWindow.GetFaith.MakeScope).AddScope('player_s', GetPlayer.MakeScope ).End)]"
		}

		state = {
			name = "patron_get_patrons"
			trigger_when = "[Not(FaithWindow.GetFaith.MakeScope.Var('faith_patrons_set').IsSet)]" #trigger when list doesnt exist - assume empty list exists still
			on_start = "[GetScriptedGui('faith_get_patrons').Execute(GuiScope.SetRoot(FaithWindow.GetFaith.MakeScope).AddScope('player_s', GetPlayer.MakeScope ).End)]"
		}

		widget = {
			size = { 0 45 }
			layoutpolicy_horizontal = expanding
			visible = "[Not( And( ObjectsEqual( Faith.Self, GetPlayer.GetFaith.Self ), GetPlayer.MakeScope.Var('recent_patron_selected').IsSet ) )]"

			text_single = {
				parentanchor = center
				size = { 0 45 }
				text = PATRONS_AVAILABLE
				default_format = "#weak"
				fontsize = 18
				margin = { 0 10 }
				align = nobaseline
				max_width = 330
				autoresize = yes

				state = {
					name = "faith_view_refresh"
					using = Animation_Refresh_FadeOut
				}

				state = {
					using = Animation_Refresh_FadeIn
				}
			}

			button_group = {
				parentanchor = right|vcenter
				onclick = "[GetVariableSystem.Set( 'patron_trait', Select_CString( GetVariableSystem.HasValue( 'patron_trait', 'all' ), 'to_clear', 'all' ) )]"
				onclick = "[GetVariableSystem.ClearIf( 'patron_trait', GetVariableSystem.HasValue( 'patron_trait', 'to_clear' ) )]"
				flowcontainer = {
					#using = tooltip_e
					margin = { 15 0 }
					spacing = 5

					text_single = {
						parentanchor = vcenter
						align = nobaseline
						default_format = "#clickable"
						text = EFFECTS_ONLY
						fontsize = 15
					}

					button_checkbox = {
						# onclick = "[GetVariableSystem.Set( 'patron_trait', Select_CString( GetVariableSystem.HasValue( 'patron_trait', 'all' ), 'to_clear', 'all' ) )]"
						# onclick = "[GetVariableSystem.ClearIf( 'patron_trait', GetVariableSystem.HasValue( 'patron_trait', 'to_clear' ) )]"
						checked = "[GetVariableSystem.HasValue('patron_trait', 'all')]"
					}

					tooltip = "[SelectLocalization( GetVariableSystem.HasValue( 'patron_trait', 'all' ), 'show_desc', 'show_modifier' )]" #localize this and probably other bits too
				}
			}
		}

		widget = {
			size = { 0 65 }
			layoutpolicy_horizontal = expanding
			visible = "[And( ObjectsEqual( Faith.Self, GetPlayer.GetFaith.Self ), GetPlayer.MakeScope.Var('recent_patron_selected').IsSet )]"

			text_single = {
				parentanchor = center
				size = { 0 45 }
				text = PATRONS_AVAILABLE
				default_format = "#weak"
				fontsize = 18
				margin = { 0 10 }
				position = { 0 -10 }
				align = nobaseline
				max_width = 330
				autoresize = yes

				state = {
					name = "faith_view_refresh"
					using = Animation_Refresh_FadeOut
				}

				state = {
					using = Animation_Refresh_FadeIn
				}
			}
			text_single = {
				parentanchor = center
				size = { 0 45 }
				text = PATRON_TIMEOUT
				default_format = "#X"
				fontsize = 18
				margin = { 0 10 }
				position = { 0 15 }
				align = nobaseline
				max_width = 480
				autoresize = yes

				state = {
					name = "faith_view_refresh"
					using = Animation_Refresh_FadeOut
				}

				state = {
					using = Animation_Refresh_FadeIn
				}
			}

			flowcontainer = {
				parentanchor = right|vcenter
				#using = tooltip_e
				margin = { 15 0 }
				position = { 0 -10 }
				spacing = 5

				text_single = {
					parentanchor = vcenter
					align = nobaseline
					default_format = "#clickable"
					text = EFFECTS_ONLY
					fontsize = 15
				}

				button_checkbox = {
					onclick = "[GetVariableSystem.Set( 'patron_trait', Select_CString( GetVariableSystem.HasValue( 'patron_trait', 'all' ), 'to_clear', 'all' ) )]"
					onclick = "[GetVariableSystem.ClearIf( 'patron_trait', GetVariableSystem.HasValue( 'patron_trait', 'to_clear' ) )]"
					checked = "[GetVariableSystem.HasValue('patron_trait', 'all')]"
				}

				tooltip = "[SelectLocalization( GetVariableSystem.HasValue( 'patron_trait', 'all' ), 'show_desc', 'show_modifier' )]" #localize this and probably other bits too
			}
		}

		divider = {
			layoutpolicy_horizontal = expanding
		}

		scrollbox = {
			name = "scrollbox_patrons"
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			datacontext = "[GetIllustration( 'religion_holding' )]"

			blockoverride "scrollbox_background" {}
			blockoverride "scrollbox_background_fade" {}

			background = {
				texture = "[Illustration.GetTexture( FaithWindow.GetFaith.MakeScope )]"
				alpha = 0.5
				fittype = end

				modify_texture = {
					blend_mode = alphamultiply
					mirror = vertical
					texture = "gfx/interface/component_masks/mask_fade_vertical.dds"
				}
			}

			vbox = {
				visible = "[IsDataModelEmpty(FaithWindow.GetFaith.MakeScope.GetList('faith_patrons'))]"
				layoutpolicy_horizontal = expanding
				text_multi = {
					text = "NO_PATRONS"
					align = center
					max_width = 500
					autoresize = yes
					using = Font_Size_Medium
				}
				
				expand = {}
			}

			blockoverride "scrollbox_content"
			{
				vbox = {
					name = "patrons_list"
					datamodel = "[FaithWindow.GetFaith.MakeScope.GetList('faith_patrons')]"
					layoutpolicy_horizontal = expanding

					item = {
						vbox = {
							layoutpolicy_horizontal = expanding
							#spacing = 3
							datacontext = "[GetTrait(Concatenate('p', Scope.GetFlagName))]"

							divider_light = {
								layoutpolicy_horizontal = expanding
							}

							vbox = {
								layoutpolicy_horizontal = expanding
								margin = { 15 7 }

								vbox = {
									layoutpolicy_horizontal = expanding

									onmousehierarchyenter = "[PdxGuiWidget.TriggerAnimation(Select_CString( GetVariableSystem.HasValue('patron_trait', 'all'),'', 'mouse_enter_nc' ))]"
									onmousehierarchyleave = "[PdxGuiWidget.TriggerAnimation(Select_CString( GetVariableSystem.HasValue('patron_trait', 'all'),'', 'mouse_leave_nc' ))]"

									state = {
										name = "mouse_enter_nc"
										on_start = "[GetVariableSystem.Set('patron_trait', Trait.GetKey)]"
									}

									state = {
										name = "mouse_leave_nc"
										on_start = "[GetVariableSystem.Clear('patron_trait')]"
									}

									button_standard_hover = {
										name = "patron_button"
										layoutpolicy_horizontal = expanding
										size = { 0 140 }

										# state = {
										# 	name = _mouse_hierarchy_enter
										# 	on_start = "[PdxGuiWidget.FindChild('patron_icon').TriggerAnimation('patron_glow_hover_enter')]"
										# }

										# state = {
										# 	name = _mouse_hierarchy_leave
										# 	on_start = "[PdxGuiWidget.FindChild('patron_icon').TriggerAnimation('patron_glow_hover_leave')]"
										# }

										clicksound = "event:/SFX/UI/Generic/sfx_ui_generic_confirm"
										down = "[Not( GetScriptedGui('faith_set_patron').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', MakeScopeFlag(Scope.GetFlagName) ).End) )]"
										enabled = "[And( ObjectsEqual( Faith.Self, GetPlayer.GetFaith.Self ), Or( Not( GetPlayer.MakeScope.Var('recent_patron_selected').IsSet ), Not( GetScriptedGui('faith_set_patron').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', MakeScopeFlag(Scope.GetFlagName) ).End) ) ) )]" #diables mouse over effects. allow press but change sound to fail one and have tt say why - resent pick or wrong faith
										onclick = "[GetScriptedGui('faith_set_patron').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', MakeScopeFlag(Scope.GetFlagName) ).End)]"

										background = {
											margin = { 100 35 }
											alpha = 0.35
											using = Background_Area_Dark

											modify_texture = {
												name = "mask"
												texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick_vertical.dds"
												spriteType = Corneredstretched
												spriteborder = { 0 0 }
												blend_mode = alphamultiply
											}

											modify_texture = {
												name = "mask2"
												texture = "gfx/interface/component_masks/mask_fade_horizontal_middle_thick.dds"
												spriteType = Corneredstretched
												spriteborder = { 0 0 }
												blend_mode = alphamultiply
											}
										}

										hbox = {
											layoutpolicy_vertical = expanding
											margin = { 10 0 }
											spacing = 7

											highlight_icon = {
												name = "patron_icon"
												size = { 120 120 }
												texture = "[Trait.GetIcon(GetNullCharacter)]"

												# state = {
												# 	name = "patron_glow_hover_enter"
												# 	glow_alpha = 0.25
												# }
												# state = {
												# 	name = "patron_glow_hover_leave"
												# 	glow_alpha = 0.0
												# }

												# glow = {
												# 	name = "patron_icon_glow"
												# 	alpha = 0
												# 	using = Color_Orange
												# 	using = Glow_Standard

												# 	glow_radius = 2
												# }
											}

											divider_light = {
												layoutpolicy_vertical = expanding
											}

											vbox = {
												margin = { 5 5 }
												margin_left = 8
												spacing = 5
												layoutpolicy_vertical = expanding
												layoutpolicy_horizontal = expanding

												hbox = {
													layoutpolicy_horizontal = expanding
													text_label_left = {
														name = "patron_name"
														layoutpolicy_horizontal = expanding
														text = "[Localize( Concatenate( 'god', Concatenate( GetPlayer.Custom( Concatenate( 'get', Scope.GetFlagName ) ), '_name' ) ) )|U]" # faith based custom loc no work (╯°□°）╯︵ ┻━┻
														default_format = "#high"
														using = Font_Size_Medium
													}
													text_single = {
														visible = "[And( ObjectsEqual( Faith.Self, GetPlayer.GetFaith.Self ), Not( GetScriptedGui('faith_set_patron').IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('trait', MakeScopeFlag(Scope.GetFlagName) ).End) ) )]"
														text = YOUR_PATRON
														using = Font_Size_Small
													}
												}

												vbox = {
													layoutpolicy_vertical = expanding
													layoutpolicy_horizontal = expanding

													scrollarea = {
														name = "patron_modifier_scrollarea"
														layoutpolicy_horizontal = expanding
														layoutpolicy_vertical = expanding
														alwaystransparent = yes

														visible = "[Or(GetVariableSystem.HasValue('patron_trait', Trait.GetKey), GetVariableSystem.HasValue('patron_trait', 'all'))]"

														scrollbarpolicy_horizontal = always_off

														scrollbar_vertical = {
															using = Scrollbar_Vertical

															blockoverride "alpha"{
																alpha = 0.6
															}
														}

														scrollwidget = {
															text_multi = {
																name = "patron_modifiers"
																size = { 180 -1 }
																autoresize = yes
																max_width = 340
																text = "[Trait.GetFullDescription( GetNullCharacter, Faith.Self )]"
																fontsize = 15
																fontsize_min = 12
																margin_bottom = -37
															}
														}
													}

													text_multi = {
														name = "patron_desc"
														layoutpolicy_vertical = expanding
														layoutpolicy_horizontal = expanding

														visible = "[Not(Or(GetVariableSystem.HasValue('patron_trait', Trait.GetKey), GetVariableSystem.HasValue('patron_trait', 'all')))]"

														text = "[Localize( Concatenate( 'desc', GetPlayer.Custom( Concatenate( 'get', Scope.GetFlagName ) ) ) )]"
														#text = "#F [Localize( Concatenate( 'desc', Faith.Custom( Concatenate( 'get', Scope.GetFlagName ) ) ) )]#!"
														using = Font_Size_Small
														default_format = "#F"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}

				divider_light = {
					visible = "[DataModelHasItems(FaithWindow.GetFaith.MakeScope.GetList('faith_patrons'))]"
					layoutpolicy_horizontal = expanding
				}
			}
		}
	}
	
	type ek_doctrine_gridbox = dynamicgridbox {
		datamodel = "[FaithWindow.GetGroupingHelper( 'main_group' ).GetGrouping]"
		flipdirection = yes
		datamodel_wrap = 6

		item = {
			widget = {
				size = { 100 100 }
				name = "doctrine_list_item"
				datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
				visible = "[FaithDoctrine.IsVisible]"
				tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP"
				using = tooltip_se

				icon_doctrine = {
					name = "doctrine_group_icon"
					size = { 60 60 }
					texture = "[FaithDoctrine.GetIcon]"
					parentanchor = hcenter
				}

				text_single = {
					parentanchor = bottom|hcenter
					margin_bottom = 15
					name = "doctrine_name"
					align = center
					text = "[FaithDoctrine.GetNameNoTooltip( GuiFaithDoctrineItem.GetFaith )]"
					default_format = "#high"
					multiline = yes
					max_width = 119   ##### minimum in order to look good in german
				}
			}
		}	
	}
	
	type ek_pantheon_box = vbox {
		layoutpolicy_horizontal = expanding
		spacing = 8

		margin_bottom = -8

		text_label_center = {
			layoutpolicy_horizontal = expanding
			text = "FAITH_DOCTRINES_PANTHEON"
			default_format = "#low"
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			hbox = {
				name = "important_doctrines"
				datamodel = "[FaithWindow.GetGroupingHelper( 'pantheon' ).GetGrouping]"
				#spacing = 15
				layoutpolicy_vertical = expanding
				minimumsize = { 0 108 }

				item = {
					vbox = {
						layoutpolicy_vertical = expanding
						minimumsize = { 100 0 }
						name = "doctrine_list_item"
						datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
						visible = "[FaithDoctrine.IsVisible]"
						tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP"
						using = tooltip_se

						icon_doctrine = {
							name = "doctrine_group_icon"
							size = { 60 60 }
							texture = "[FaithDoctrine.GetIcon]"
						}

						text_single = {
							name = "doctrine_name"
							align = center
							text = "[FaithDoctrine.GetNameNoTooltip( GuiFaithDoctrineItem.GetFaith )]"
							default_format = "#high"
							multiline = yes
							max_width = 101   ##### minimum in order to look good in german
						}

						expand = {}
					}
				}
			}
		}	
	}
	
	type ek_virtues_sins = vbox {
		layoutpolicy_horizontal = expanding
		spacing = 12
		margin_bottom = -10

		text_label_center = {
			layoutpolicy_horizontal = expanding
			text = "FAITH_DOCTRINES_VIRTUES_SINS"
			default_format = "#low"
		}

		fixedgridbox = {
			datamodel = "[FaithWindow.GetGroupingHelper( 'virtues_sins' ).GetGrouping]"
			flipdirection = yes
			addcolumn = 230
			addrow = 65
			datamodel_wrap = 2

			item = {
				widget_doctrine_item = {}
			}
		}	
	}
	
	type ek_daedra_doctrines = vbox {
		layoutpolicy_horizontal = expanding
		spacing = 12
		margin_bottom = -10

		text_label_center = {
			layoutpolicy_horizontal = expanding
			text = "FAITH_DOCTRINES_DAEDRIC_PRINCES"
			default_format = "#low"
		}

		fixedgridbox = {
			datamodel = "[FaithWindow.GetGroupingHelper( 'daedric_princes' ).GetGrouping]"
			flipdirection = yes
			addcolumn = 225
			addrow = 67
			datamodel_wrap = 2

			item = {
				widget_doctrine_item = {}
			}
		}	
	}
	
	type ek_secondary_pantheon = vbox {
		layoutpolicy_horizontal = expanding
		spacing = 8

		margin_bottom = -8

		text_label_center = {
			layoutpolicy_horizontal = expanding
			text = "FAITH_DOCTRINES_SECONDARY_PANTHEON"
			default_format = "#low"

			visible = "[DataModelHasItems(FaithWindow.GetGroupingHelper( 'secondary_pantheon' ).GetGrouping)]"
		}

		hbox = {
			layoutpolicy_horizontal = expanding

			visible = "[DataModelHasItems(FaithWindow.GetGroupingHelper( 'secondary_pantheon' ).GetGrouping)]"

			hbox = {
				name = "important_doctrines"
				datamodel = "[FaithWindow.GetGroupingHelper( 'secondary_pantheon' ).GetGrouping]"
				#spacing = 15
				layoutpolicy_vertical = expanding
				minimumsize = { 0 108 }

				item = {
					vbox = {
						layoutpolicy_vertical = expanding
						minimumsize = { 100 0 }
						name = "doctrine_list_item"
						datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
						visible = "[FaithDoctrine.IsVisible]"
						tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP"
						using = tooltip_se

						icon_doctrine = {
							name = "doctrine_group_icon"
							size = { 60 60 }
							texture = "[FaithDoctrine.GetIcon]"
						}

						text_single = {
							name = "doctrine_name"
							align = center
							#raw_text = "Bingo Bongo Tongo gyngo"
							text = "[FaithDoctrine.GetNameNoTooltip( GuiFaithDoctrineItem.GetFaith )]"
							default_format = "#high"
							multiline = yes
							max_width = 101   ##### minimum in order to look good in german
						}

						expand = {}
					}
				}
			}
		}
	}

	type ek_tolerance_doctrines = vbox {
		visible = "[DataModelHasItems(FaithWindow.GetGroupingHelper( 'ek_special' ).GetGrouping)]"
		layoutpolicy_horizontal = expanding
		spacing = 7

		text_label_center = {
			layoutpolicy_horizontal = expanding
			text = "FAITH_DOCTRINES_IMPORTANT_SPECIAL"
			default_format = "#low"
		}

		hbox = {
			datamodel = "[FaithWindow.GetGroupingHelper( 'ek_special' ).GetGrouping]"
			layoutpolicy_horizontal = expanding
			minimumsize = { 0 108 }

			spacing = 8

			item = {
				vbox = {
					datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
					datacontext = "[GuiFaithDoctrineItem.GetFaith]"
					layoutpolicy_vertical = expanding
					#EK EDIT: changed size slightly to fit all doctrines comfortably // Might not work completely fine with the german translation
					minimumsize = { 80 0 }
					name = "doctrine_list_item"
					datacontext = "[GuiFaithDoctrineItem.GetDoctrine]"
					visible = "[FaithDoctrine.IsVisible]"
					tooltip = "FAITH_WINDOW_DOCTRINE_TOOLTIP"
					using = tooltip_se

					icon_doctrine = {
						name = "doctrine_group_icon"
						size = { 60 60 }
						texture = "[FaithDoctrine.GetIcon]"
					}

					text_single = {
						name = "doctrine_name"
						align = center
						#raw_text = "Bingo Bongo Tongo gyngo"
						text = "[FaithDoctrine.GetNameNoTooltip( GuiFaithDoctrineItem.GetFaith )]"
						default_format = "#high"
						multiline = yes
						max_width = 101   ##### minimum in order to look good in german
					}

					expand = {}
				}

			}
		}
	}
}

